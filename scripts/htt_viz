#!/usr/bin/env python3

import sys
import yaml
import os

import rospy

from os.path import exists

from htt_viz.srv import Update
from htt_viz.srv import UpdateResponse

from htt_viz_py.QGraphicsTaskTreeNode import QGraphicsTaskTreeNode
from htt_viz_py.tree import Tree
from htt_viz_py.imgout import makeImg
from htt_viz_py.orgButton import organizeTreeButton
from htt_viz_py.ProgramAuthor import ProgramAuthor

from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtWidgets import QMainWindow, QWidget, QPushButton, QAction, QFrame
from PyQt5.QtCore import QSize, Qt	
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5 import uic

class MainWindow(QMainWindow):
	def __init__(self):
		QMainWindow.__init__(self)
		self.initUI()		
		
		#This is a placeholder for now as the actual tree isn't used however once it is it should be good
		#to go just by uncommenting it and the ros functionality will go back to normal
		self.server = rospy.Service('update_htt', Update, self.taskTree.updateCallback)


	def initUI(self):
		# Setup Main Window
		self.setMinimumSize(QSize(350, 275)) 
		self.resize(700, 550)   
		self.setWindowTitle("HTT-Viz")

		# New Action
		newAction = QAction(QIcon('new.png'), '&New', self)		
		newAction.setShortcut('Ctrl+N')
		newAction.setStatusTip('New document')
		newAction.triggered.connect(self.newCheck)

		# Open Action
		openAction = QAction(QIcon('open.png'), '&Open', self)		
		openAction.setShortcut('Ctrl+O')
		openAction.setStatusTip('Open document')
		openAction.triggered.connect(self.openCheck)
		
		# Save Action
		saveAction = QAction(QIcon('save.png'), '&Save', self)		
		saveAction.setShortcut('Ctrl+S')
		saveAction.setStatusTip('Save document')
		saveAction.triggered.connect(self.saveCall)
		
		# Save As Action
		saveAsAction = QAction(QIcon('saveas.png'), '&Save As...', self)		
		saveAsAction.setShortcut('Ctrl+Shift+S')
		saveAsAction.setStatusTip('Save document as...')
		saveAsAction.triggered.connect(self.saveAsCall)
	
		# Exit Action
		exitAction = QAction(QIcon('exit.png'), '&Exit', self)		
		exitAction.setShortcut('Ctrl+Q')
		exitAction.setStatusTip('Exit application')
		exitAction.triggered.connect(self.exitCall)
		
		# Undo Action
		undoAction = QAction(QIcon('undo.png'), '&Undo', self)		
		undoAction.setShortcut('Ctrl+Z')
		undoAction.setStatusTip('Undo previous action')
		undoAction.triggered.connect(self.undoCall)
		
		# Redo Action
		redoAction = QAction(QIcon('redo.png'), '&Redo', self)		
		redoAction.setShortcut('Ctrl+Shift+Z')
		redoAction.setStatusTip('Redo previously undone action')
		redoAction.triggered.connect(self.redoCall)
		
		# Settings Action
		settingsAction = QAction(QIcon('settings.png'), '&Settings', self)
		settingsAction.setStatusTip('View the settings')
		settingsAction.triggered.connect(self.settingsCall)
		
		# About Action
		aboutAction = QAction(QIcon('about.png'), '&About', self)
		aboutAction.setStatusTip('View the about window')
		aboutAction.triggered.connect(self.aboutCall)

		# Create menu bar and add actions
		menuBar = self.menuBar()
		
		fileMenu = menuBar.addMenu('&File')
		fileMenu.addAction(newAction)
		fileMenu.addAction(openAction)
		fileMenu.addAction(saveAction)
		fileMenu.addAction(saveAsAction)
		fileMenu.addSeparator()
		fileMenu.addAction(exitAction)
		
		editMenu = menuBar.addMenu('&Edit')
		editMenu.addAction(undoAction)
		editMenu.addAction(redoAction)
		
		viewMenu = menuBar.addMenu('&View')
		viewMenu.addAction(settingsAction)
		
		helpMenu = menuBar.addMenu('&Help')
		helpMenu.addAction(aboutAction)
		
		# Splitter
		self.subWindow1 = SubWindow()
		self.subWindow2 = SubWindow()
		
		self.subsplitter = QSplitter(Qt.Horizontal)
		self.subsplitter.setStyleSheet('background-color: rgb(50,50,50)') 
		self.subsplitter.addWidget(self.subWindow1)
		self.subsplitter.addWidget(self.subWindow2)
		
		#Add Place For Buttons Above Tree Display
		self.buttonRack = ButtonRack()
		self.subWindow2.layout().addWidget(self.buttonRack, alignment=QtCore.Qt.AlignRight)
		
		#Create Organize Tree Button
		orgButton = QPushButton(self)
		orgButton.setText("Organize Tree")
		orgButton.setStyleSheet("background-color:lightGray")
		orgButton.clicked.connect(lambda : organizeTreeButton.organizeTree(organizeTreeButton, self.taskTree.root_node))
		
		#Create Img Export Button
		imgButton = QPushButton(self)
		imgButton.setText("Export PNG")
		imgButton.setStyleSheet("background-color:lightGray")
		imgButton.clicked.connect(lambda : makeImg(self.taskTree.root_node, self))
		
		#Add Buttons to Button Rack
		self.buttonRack.addButton(orgButton)
		self.buttonRack.addButton(imgButton)
		
		# Setup Task Tree Display
		self.taskTree = Tree()
		self.taskTreeDisplayWidget = HTTDisplayWidget(self.taskTree, self)
		self.subWindow2.layout().addWidget(self.taskTreeDisplayWidget)
		
		self.nodeList = QListWidget()
		self.subWindow1.layout().addWidget(self.nodeList)

		self.PopulateNodeList()
		
		self.nodeList.itemSelectionChanged.connect(self.handleNodeSelectionChange)
		self.nodeList.item(0).setSelected(True)
		self.subWindow1.setMaximumWidth(150)
		
		self.setCentralWidget(self.subsplitter)
		
		self.filePath = None

	# Add nodes to the master node list	
	def PopulateNodeList(self):
		self.nodeList.clear()

		for nodeType in self.taskTree.author.node_master_list[1:]:
			self.nodeList.addItem(nodeType.name)
	
	def handleNodeSelectionChange(self):
		
		if len(self.nodeList.selectedItems()) > 0:
			selectedItem = self.nodeList.selectedItems()[0]
			self.taskTreeDisplayWidget.selectedNodeIndex = self.nodeList.row(selectedItem) + 1

		# We only use 1 column. 
		# index is incremented by 1 as root is removed from QListWidget

	# Check for unsaved changes before opening
	def openCheck(self):
		if self.windowTitle() == "*HTT-Viz":
			self.w = UnsavedDiscardCall(self, "Open")
			self.w.show()
		else:
			self.openCall()

	# Opening file dialog
	def openCall(self):
		isImported = False
		options = QFileDialog.Options()
		options |= QFileDialog.DontUseNativeDialog
		filePath, _ = QFileDialog.getOpenFileName(self, "Open", "","YAML Files (*.yaml)", options=options)
		if filePath:
			self.filePath = filePath
			
			with open(filePath, "r") as f:
				papa = ProgramAuthor()
				papa.clearTypes()

				data = yaml.load(f, Loader=yaml.Loader)

				# Unhappy path check and response
				if data.get("NodeFileIncludes") is None:
					msg = QMessageBox()
					msg.setIcon(QMessageBox.Information)
					msg.setText("No node includes found. Please adjust the .yaml file appropriately: \n\nNodeFileIncludes:\n- /home/catkin_ws/src/htt-viz/include/behavior/move_behavior.yaml\n- /home/catkin_ws/src/htt-viz/include/behavior/draw_behavior.yaml\n...\nNodeList:\n...")
					msg.setWindowTitle("KeyError: 'NodeFileIncludes'")
		
					msg.exec()					

					return	

				# Load all the behavior types that are needed for the file we are opening
				for file_name in data["NodeFileIncludes"]:
					try:
						papa.addNodeFromFile(file_name)
					except FileNotFoundError:

						fnf = "..." + file_name[-30:]

						FTFoptions = QFileDialog.Options()
						FTFoptions |= QFileDialog.DontUseNativeDialog
						FTFfilePath, _ = QFileDialog.getOpenFileName(self, "File Not Found: "+fnf, "","YAML Files (*.yaml)", options=FTFoptions)

						if FTFfilePath == "":
							print("File path not found - open aborted")
							return

						papa.addNodeFromFile(FTFfilePath)
						

				
				self.taskTree.author = papa

				self.PopulateNodeList()

				#clear all the currently loaded behaviors
				self.taskTreeDisplayWidget.clearTaskTree()

				# I'm leaving this in just because it is helpful for debugging
				# print(self.taskTree.author.toString())
				
				for node in data["NodeList"]:
					#name, x=0, y=0, nParent = None
					x = y = 0


					if "x" in data["Nodes"][node]:
						x = data["Nodes"][node]["x"]
					else: 
						isImported = True
					if "y" in data["Nodes"][node]:
						y = data["Nodes"][node]["y"]
					else: 
						isImported = True
					parent = data["Nodes"][node]["parent"]

					node_type = data["Nodes"][node]["mask"]["type"]
					
					self.taskTreeDisplayWidget.addChildNodeFromDict(data["Nodes"][node])

					#now that the node has been added to the tree I have to fill in its parameters
					node_ptr = self.taskTree.findNodeByName(node)
					for param in node_ptr.params:
						param.value = data["Nodes"][node][param.name]

					if "Title" in data["Nodes"][node]:
						node_ptr.setTitle(data["Nodes"][node]["Title"])
					else: 
						isImported = True

			self.setWindowTitle("HTT-Viz")
		if isImported:
			organizeTreeButton.organizeTree(organizeTreeButton, self.taskTree.root_node)
			self.setWindowTitle("*HTT-Viz")

	# Check for unsaved content before creating new tree
	def newCheck(self):
		if self.windowTitle() == "*HTT-Viz":
			self.w = UnsavedDiscardCall(self, "Reset")
			self.w.show()
		else:
			self.newCall()

	# Create new tree (Remove old tree and filepath)
	def newCall(self):
		self.taskTreeDisplayWidget.clearTaskTree()
		self.filePath = None
		self.taskTree.root_node = self.taskTree.createNewNode(0, 50, 10)
		self.taskTree.root_node.registerScene(self.taskTreeDisplayWidget.scene)

		self.setWindowTitle("HTT-Viz")

	# Saving file dialog
	# https://pythonspot.com/pyqt5-file-dialog/	
	def saveCall(self):

		if not self.filePath:
			dialog = QFileDialog()
			dialog.setFilter(dialog.filter() | QtCore.QDir.Hidden)
			dialog.setDefaultSuffix('yaml')
			dialog.setAcceptMode(QFileDialog.AcceptSave)
			dialog.setNameFilters(['YAML (*.yaml)'])
			if dialog.exec_() != QDialog.Accepted:
				return

			self.filePath = dialog.selectedFiles()[0]
			
		filePath = self.filePath
			
		data = self.taskTree.toYamlDict()
		with open(filePath, "w") as f:
			yaml.dump(data, f)
			
		self.setWindowTitle("HTT-Viz")
	
	# Save as file dialog
	def saveAsCall(self): # Catching NULL pointers in java, a sign of deeper problems.
		dialog = QFileDialog()
		dialog.setFilter(dialog.filter() | QtCore.QDir.Hidden)
		dialog.setDefaultSuffix('yaml')
		dialog.setAcceptMode(QFileDialog.AcceptSave)
		dialog.setNameFilters(['YAML (*.yaml)'])
		if dialog.exec_() != QDialog.Accepted:
			return
		
		self.filePath = dialog.selectedFiles()[0]
			
		data = self.taskTree.toYamlDict()
		with open(self.filePath, "w") as f:
			yaml.dump(data, f)
				
		self.setWindowTitle("HTT-Viz")

	# Close system (Calls: 'closeEvent()')
	def exitCall(self):
		self.close()
		
	# Call to undo stack and pop the top
	def undoCall(self):
		obj = self.taskTree.undo_stack.pop()

		if not obj is None:
			obj.run()
			obj.switch = False
			obj.next = None
			self.taskTree.redo_stack.push(obj)

	# Call to redo stack and pop the top
	def redoCall(self):
		obj = self.taskTree.redo_stack.pop()

		if not obj is None:
			obj.run()
			obj.switch = True
			obj.next = None 
			self.taskTree.undo_stack.push(obj)
		
		
	def settingsCall(self):
		self.w = SettingsWindow(self)
		self.w.show()
	
	# Opens about window
	def aboutCall(self):
		msg = QMessageBox()
		msg.setIcon(QMessageBox.Information)
		msg.setText("Welcome to HTT-Viz, a graphical user interface for the purpose of creating hierarchical task trees in an efficient manner.\n\nInstructions:\nAdding Nodes: New child nodes can be adding to existing nodes by selecting the desired node type from the list on the left followed by right-clicking the desired parent node and selecting 'Add Child Node' from the drop down box.\n\nEditting Nodes: Nodes can be edited by either rick-clicking the desired node and selecting 'Edit Node' from the drop down box or by double clicking the desired node. This will open the editting window for that specific node which allows the user to change the display name and any parameter(s) that node type has.\n\nRemoving Nodes: Nodes can be removed by rick-clicking the desired node and selecting 'Remove Node' from the drop down box. In addition to the selected node, this will remove any children/subnodes that node has.")
		msg.setWindowTitle("HTT-Viz About")
		
		msg.exec()

	# Close event that checks for unsaved content
	def closeEvent(self, event):
		if self.windowTitle() == "HTT-Viz":
			event.accept()
		else:
			event.ignore()
			self.w = UnsavedContentWindow(self)
			self.w.show()

class SubWindow(QWidget):
	def __init__(self):
		super(SubWindow, self).__init__()

		self.main_layout = QVBoxLayout()
		self.setLayout(self.main_layout)
		
class ButtonRack(QWidget):
	def __init__(self):
		super().__init__()
		self.layout = QHBoxLayout()
		self.setLayout(self.layout)
		
	def addButton(self, QPushButton):
		self.layout.addWidget(QPushButton, alignment=QtCore.Qt.AlignRight)

class HTTDisplayWidget(QGraphicsView):
	def __init__(self, taskTree, mainWin):
		super().__init__()
		self.mainWin = mainWin
		
		self.taskTree = taskTree
		self.scene = QGraphicsScene()
		self.scene.setBackgroundBrush(QColor(0x3D, 0x3D, 0x3D))
		self.setScene(self.scene)
		self.taskTree.registerScene(self.scene)
		self.setColors(self.taskTree.root_node)
		
		# TODO: Scrolling makes a constant cursor, and feels really janky to use
		# Maybe we should implment our own?
		# QGraphicsView.DragMode.ScrollHandDrag = 1
		self.setDragMode(1)
		
		self.show()
		
		self.selectedNodeIndex = 0
		
	def addChildNode(self, parentName, selectedNodeIndex, x=None, y=None):
		parentNode = self.taskTree.findNodeByName(parentName)
		if parentNode is not None:
			if not self.tooManyRootChildren(parentNode):			
				self.taskTree.addNode([parentNode, selectedNodeIndex, True])
				self.localSort(parentNode)
				if self.getAutoOrgState():
					organizeTreeButton.organizeTree(organizeTreeButton, self.taskTree.root_node)
			
		self.mainWin.setWindowTitle("*HTT-Viz")
		self.setColors(self.taskTree.root_node)

	def replaceTree(self):
		self.taskTreeDisplayWidget.clearTaskTree()
		self.taskTree.replaceRootNode(self.scene)

	def addChildNodeFromDict(self, dict):
		self.taskTree.addChildNodeFromDict(dict)
				
	def removeChildNode(self, name):
		self.taskTree.removeNode([name, True])
		
		self.mainWin.setWindowTitle("*HTT-Viz")
				
	def clearTaskTree(self):
		#for child in self.taskTree.root_node.children:
		#	self.removeChildNode(child.name)
		self.taskTree.destroyTree()

	# Double click check for node and open relavant editing window
	def mouseDoubleClickEvent(self, event):
		eventPos = event.pos()
		maybeNode = self.itemAt(eventPos)
		if not isinstance(maybeNode, QGraphicsTaskTreeNode):
			maybeNode = None

		if maybeNode is not None:
			self.w = EditWindow(self.taskTree.findNodeByName(maybeNode.name), self.mainWin)
			self.w.show()
		
	def contextMenuEvent(self, event):
		eventPos = event.pos()
		maybeNode = self.itemAt(eventPos)
		if not isinstance(maybeNode, QGraphicsTaskTreeNode):
			maybeNode = None
	
		# https://stackoverflow.com/questions/67591464/create-event-clicking-on-context-menu-with-python-pyqt5
		menu = QMenu(self)
		# TODO: Only show items if a node was selected, else early exit or show different menu
		addChildNode = menu.addAction("Add Child Node")
		editNode = menu.addAction("Edit Node")
		removeNode = menu.addAction("Remove Node")
		close = menu.addAction("Close")
		action = menu.exec_(self.mapToGlobal(eventPos))
		
		if action == addChildNode:
			if maybeNode is not None:
				self.addChildNode(maybeNode.name, self.selectedNodeIndex)
		elif action == editNode:
			if maybeNode is not None:
				#print('Edit Node')
				self.w = EditWindow(self.taskTree.findNodeByName(maybeNode.name), self.mainWin)
				self.w.show()
		elif action == removeNode:
			if maybeNode is not None:
				self.removeChildNode(maybeNode.name)
		elif action == close:
			if self.windowTitle() != "HTT-Viz":
				self.w = UnsavedContentWindow(self.mainWin)
				self.w.show()
			else:   
				app.quit()
			
	def tooManyRootChildren(self, parentNode):
		if parentNode.isRoot():
			if len(parentNode.children) > 0:
				self.w = TooManyRootChildrenErrorWindow(self)
				self.w.show()
				return True
			else:
				return False
		else:
			return False
			
	def localSort(self, parentNode):
		if len(parentNode.children) == 1:
			for child in parentNode.children:
				child.setX(parentNode.getX())
				child.setY(parentNode.getY() + 80)
				
		else:
			max = float('-inf')
			for child in parentNode.children:
				child.setY(parentNode.getY() + 80)
				if child.getX() > max:
					max = child.getX()
					
			lastChild = len(parentNode.children) - 1
			parentNode.children[lastChild].setX((parentNode.children[lastChild - 1].getX() + (parentNode.children[lastChild].getWidth() * 1.5)))
			difference = (parentNode.children[lastChild].getWidth() * 1.5)/2
			for child in parentNode.children:
				organizeTreeButton.moveSubTree(organizeTreeButton, child, difference)
				
	def getAutoOrgState(self):
		path = self.getConfigPath()
		if not os.path.exists(path):
			createDefaultConfig(path)
			
		file = open(path, 'r')
		lines = file.readlines()	
		file.close()
		
		if lines[1] == "	auto-organize: false\n":
			return False
		elif lines[1] == "	auto-organize: true\n":
			return True
			
	def getConfigPath(self):
		folderAndFileName = "config/config.yaml"
		
		directory = os.path.dirname(os.path.realpath(__file__))
		end = len(directory) - 1
		
		x = 0
		for x in range(end, 0, -1):
			if directory[x] != '/':
				directory = directory[:-1]
			else:
				break
				
		directory = directory + folderAndFileName
		
		return directory
		
	def setColors(self, root):
		path = self.getConfigPath()
		if not os.path.exists(path):
			createDefaultConfig(path)
			
		file = open(path, 'r')
		lines = file.readlines()	
		file.close()
		
		redArray = []
		greenArray = []
		blueArray = []
		commaPos = []
		
		for x in range(2,5):
			y = 0
			for y in range(len(lines[x])):
				if lines[x][y] == ':':
					colonPos = y
				if lines[x][y] == ',':
					commaPos.append(y - (colonPos + 2))
			lines[x] = lines[x][colonPos+2:]
			redArray.append(int(lines[x][:commaPos[0]]))
			greenArray.append(int(lines[x][commaPos[0]+2:commaPos[1]]))
			blueArray.append(int(lines[x][(commaPos[1]+2):len(lines[x]) - 1]))
			commaPos.clear()
			
		self.applyNodeColors(redArray, greenArray, blueArray, root)
		
		mainWinRgbString = ('rgb(' + str(redArray[2]) + ',' + str(greenArray[2]) + ',' + str(blueArray[2]) + ')')
		self.mainWin.subsplitter.setStyleSheet('background-color: ' + mainWinRgbString) 
		
	def applyNodeColors(self, redArray, greenArray, blueArray, root):
		root.qGraphics.setInactiveColors(redArray,greenArray,blueArray)
		for child in root.children:
			self.applyNodeColors(redArray, greenArray, blueArray, child)
	
# Node Editing window
# QDialog to enable Modality		
class EditWindow(QDialog):
	def __init__(self, node, mainWin):
		super().__init__()

		self.setWindowModality(Qt.ApplicationModal) # Disables interaction with other windows while open

		self.node = node # Get node inforamtion
		self.mainWin = mainWin # Get window information
		
		textBoxList = QFormLayout()
		
		# Steup window
		p = self.palette()
		p.setColor(self.backgroundRole(), QColor(0x3D, 0x3D, 0x3D))
		self.setPalette(p)
		
		self.setWindowTitle(node.name)
		self.setMinimumSize(QSize(350, 275)) 
		self.resize(350, 275)
		
		# get node title and set title box to such
		self.titleBox = QLineEdit()
		self.titleBox.setMaxLength(16)
		self.titleBox.resize(200,40)
		self.titleBox.setText(node.title)
		textBoxList.addRow("Title", self.titleBox)
		
		# Get all node parameters and create individual text boxes
		self.paramList = []
		for x in node.params:
			param = None
			
			if x.type == "bool":
				param = QCheckBox()
				param.setChecked(x.value)
			elif x.type == "float":
				param = QLineEdit()
				param.setValidator(QDoubleValidator(0.99,99.99,2))
				param.setText(str(x.value))
			elif x.type == "int":
				param = QLineEdit()
				param.setValidator(QIntValidator())
				param.setText(str(x.value))
			elif x.type == "string":
				param = QLineEdit()
				param.setText(str(x.value))
			else:
				print('Unsupported Parameter')
					
			self.paramList.append(param)
			textBoxList.addRow(x.name, param)
			param.textChanged.connect(self.onChange)
		
		# Window buttons
		saveButton = QPushButton('Save', self)
		saveButton.clicked.connect(self.saveClick)
		
		closeButton = QPushButton('Close', self)
		closeButton.clicked.connect(self.closeClick)
		
		textBoxList.addRow(saveButton, closeButton)
		
		self.setLayout(textBoxList)
		
		self.titleBox.textChanged.connect(self.onChange)

	# If text boxes are changed set unsaved content check
	def onChange(self):
		self.setWindowTitle("*"+self.node.name)
		
	def saveClick(self):
		#save title value
		self.node.setTitle(self.titleBox.text())

		#save the parameter values of nodes
		for i in range(len(self.paramList)):
			if self.node.params[i].type == "bool":
				self.node.params[i].setValue(self.paramList[i].isChecked())
			else:
				self.node.params[i].setValue(self.paramList[i].text())
				
		self.mainWin.setWindowTitle("*HTT-Viz")
		self.setWindowTitle(self.node.name)
	
	# Close edit window with unsaved content check
	def closeClick(self):
		if self.windowTitle() != self.node.name:
			self.w = UnsavedContentWindow(self)
			self.w.show()
		else:	
			self.close()

# Unsaved Content window
# QDialog to enable Modality
class UnsavedContentWindow(QDialog):
	def __init__(self, window):
		super().__init__()

		self.setWindowModality(Qt.ApplicationModal) # Disables interaction with other windows while open

		self.window = window # Get window information

		# Setup window
		p = self.palette()
		p.setColor(self.backgroundRole(), QColor(0x3D, 0x3D, 0x3D))
		self.setPalette(p)
		
		self.setWindowTitle("Warning!")
		self.setMinimumSize(QSize(225, 130))
		self.setMaximumSize(QSize(225, 130)) 
		self.resize(225, 130)

		uC = QLabel()
		uC.setText("Unsaved Content")
		uC.setStyleSheet("color: white")
		uC.setAlignment(Qt.AlignCenter)

		vbox = QVBoxLayout()
		vbox.addWidget(uC)

		saveButton = QPushButton('Save Content', self)
		saveButton.clicked.connect(self.saveContentClick)
		vbox.addWidget(saveButton)

		# Only display 'Save As' button if closing main window
		if window.windowTitle() == "*HTT-Viz":
			saveAsButton = QPushButton('Save Content As', self)
			saveAsButton.clicked.connect(self.saveContentAsClick)
			vbox.addWidget(saveAsButton)
		
		closeButton = QPushButton('Close Anyway', self)
		closeButton.clicked.connect(self.closeAnywayClick)
		vbox.addWidget(closeButton)

		
		
		self.setLayout(vbox)

	def saveContentClick(self):
		# Call respective save functions based on window
		if self.window.windowTitle() == "*HTT-Viz":
			self.window.saveCall()
			self.close()
		elif self.window.windowTitle() == ("*"+self.window.node.name):
			self.window.saveClick()
			self.close()
		
	def saveContentAsClick(self):
		self.window.saveAsCall()
		self.close()

	def closeAnywayClick(self):
		# Call respective close functions based on window
		if self.window.windowTitle() == "*HTT-Viz":
			app.quit()
		elif self.window.windowTitle() == ("*"+self.window.node.name):
			self.window.close()
			self.close()

# Unsaved Content window for 'Open' and 'New'
# QDialog to enable Modality
class UnsavedDiscardCall(QDialog):
	def __init__(self, window, check):
		super().__init__()

		self.setWindowModality(Qt.ApplicationModal) # Disables interaction with other windows while open

		self.window = window # Get window information
		self.check = check # Get chekc information (Open/New)

		# Setup window
		p = self.palette()
		p.setColor(self.backgroundRole(), QColor(0x3D, 0x3D, 0x3D))
		self.setPalette(p)
		
		self.setWindowTitle("Warning!")
		self.setMinimumSize(QSize(225, 130))
		self.setMaximumSize(QSize(225, 130)) 
		self.resize(225, 130)

		uC = QLabel()
		uC.setText("Unsaved Content")
		uC.setStyleSheet("color: white")
		uC.setAlignment(Qt.AlignCenter)

		vbox = QVBoxLayout()
		vbox.addWidget(uC)

		saveButton = QPushButton('Save Content', self)
		saveButton.clicked.connect(self.saveContentClick)
		vbox.addWidget(saveButton)

		saveAsButton = QPushButton('Save Content As', self)
		saveAsButton.clicked.connect(self.saveContentAsClick)
		vbox.addWidget(saveAsButton)
		
		discardButton = QPushButton('Discard Changes and '+self.check, self)
		discardButton.clicked.connect(self.discardClick)
		vbox.addWidget(discardButton)


		
		
		self.setLayout(vbox)

	def saveContentClick(self):
		self.window.saveCall()
		self.close()
		
	def saveContentAsClick(self):
		self.window.saveAsCall()
		self.close()

	def discardClick(self):
		# Call respective function based on original fucntion call
		if self.check == "Reset":
			self.window.newCall()
			self.close()
		elif self.check == "Open":
			self.window.openCall()
			self.close()

class TooManyRootChildrenErrorWindow(QDialog):
	def __init__(self, window):
		super().__init__()

		self.setWindowModality(Qt.ApplicationModal)

		self.window = window
		
		p = self.palette()
		p.setColor(self.backgroundRole(), QColor(0x3D, 0x3D, 0x3D))
		self.setPalette(p)
		
		self.setWindowTitle("Warning!")
		self.setMinimumSize(QSize(225, 130))
		self.setMaximumSize(QSize(225, 130)) 
		self.resize(225, 130)

		layout = QVBoxLayout()
		
		label = QLabel("The Root Node Is Limited To One Child", self)
		label.setStyleSheet("color: white")
		label.setAlignment(Qt.AlignCenter)
		label.setWordWrap(True)

		closeButton = QPushButton('Close', self)
		closeButton.clicked.connect(lambda : self.close())
		
		layout.addWidget(label)
		layout.addWidget(closeButton)
		
		self.setLayout(layout)
		
class SettingsWindow(QDialog):
	
	def __init__(self, window):
		super().__init__()

		self.setWindowModality(Qt.ApplicationModal)

		self.window = window
		
		p = self.palette()
		p.setColor(self.backgroundRole(), QColor(0x3D, 0x3D, 0x3D))
		self.setPalette(p)
		
		self.setWindowTitle("Settings")
		self.setMinimumSize(QSize(225, 150))
		self.setMaximumSize(QSize(225, 150)) 
		self.resize(225, 150)

		layout = QVBoxLayout()
		
		autoOrganizeToggleButton = QPushButton(self)
		if self.getAutoOrgState():
			autoOrganizeToggleButton.setText("Auto-Organize: On")
			autoOrganizeToggleButton.setStyleSheet("background-color : green")
		else:
			autoOrganizeToggleButton.setText("Auto-Organize: Off")
			autoOrganizeToggleButton.setStyleSheet("background-color : red")
			
		autoOrganizeToggleButton.setCheckable(True)
		autoOrganizeToggleButton.clicked.connect(lambda : self.swapAutoOrgState(autoOrganizeToggleButton))
		
		changeNodeMainColorButton = QPushButton('Change Node Primary Color')
		changeNodeMainColorButton.clicked.connect(lambda : self.changeColor("node-main"))
		
		changeNodeBorderColorButton = QPushButton('Change Node Border Color')
		changeNodeBorderColorButton.clicked.connect(lambda : self.changeColor("node-border"))
		
		changeBackgroundColorButton = QPushButton('Chance Window Color')
		changeBackgroundColorButton.clicked.connect(lambda : self.changeColor("background"))		
		
		closeButton = QPushButton('Close', self)
		closeButton.clicked.connect(lambda : self.close())
		
		layout.addWidget(autoOrganizeToggleButton)
		layout.addWidget(changeNodeMainColorButton)
		layout.addWidget(changeNodeBorderColorButton)
		layout.addWidget(changeBackgroundColorButton)
		layout.addWidget(closeButton)
		
		self.setLayout(layout)
	
	#see whether user has set auto org to on or off	
	def getAutoOrgState(self):
		path = self.getConfigPath()
		if not os.path.exists(path):
			createDefaultConfig(path)
			
		file = open(path, 'r')
		lines = file.readlines()	
		file.close()
		
		if lines[1] == "	auto-organize: false\n":
			return False
		elif lines[1] == "	auto-organize: true\n":
			return True
			
	#swap button button appearance and config info for auto org preference		
	def swapAutoOrgState(self, button):
		path = self.getConfigPath()
		if not os.path.exists(path):
			createDefaultConfig(path)
		
		file = open(path, 'r')
		lines = file.readlines()	
		file.close()
		
		if lines[1] == "	auto-organize: false\n":
			lines[1] = "	auto-organize: true\n"
		elif lines[1] == "	auto-organize: true\n":
			lines[1] = "	auto-organize: false\n"
			
		file = open(path, 'w')
		file.writelines(lines)
		file.close()
		
		if self.getAutoOrgState():
			button.setText("Auto-Organize: On")
			button.setStyleSheet("background-color : green")
		else:
			button.setText("Auto-Organize: Off")
			button.setStyleSheet("background-color : red")
		
	#prompts user with color dialogue and calls functions responsible for
	#storing their decision in the config file and applying their changes	
	def changeColor(self, choice):
		color = QColorDialog.getColor()
		self.storeColor(color, choice)
		self.window.taskTreeDisplayWidget.setColors(self.window.taskTree.root_node)
	
	#stores new color in config file
	def storeColor(self, color, choice):
		path = self.getConfigPath()
		if not os.path.exists(path):
			createDefaultConfig(path)
		
		colortuple = color.getRgb()
		colortuple = colortuple[:-1]
		colorstring = str(colortuple)
		colorstring = colorstring[1:]
		colorstring = colorstring[:-1]
		
		file = open(path, 'r')
		lines = file.readlines()	
		file.close()
		
		if choice == "node-main":
			lines[2] = "	node-main-color: " + colorstring + "\n"
		elif choice == "node-border":
			lines[3] = "	node-border-color: " + colorstring + "\n"
		elif choice == "background":
			lines[4] = "	background-color: " + colorstring + "\n"
				
		file = open(path, 'w')
		file.writelines(lines)
		file.close()
	
	#creates the default config
	def createDefaultConfig(path):
		f = open(path,"w")
		f.write("config:\n")
		f.write("	auto-organize: false\n")
		f.write("	node-main-color: 121, 218, 255\n")
		f.write("	node-border-color: 4, 180, 245\n")
		f.write("	background-color: 50, 50, 50\n")
		f.close()
		
	def getConfigPath(self):
		folderAndFileName = "config/config.yaml"
		
		directory = os.path.dirname(os.path.realpath(__file__))
		end = len(directory) - 1
		
		x = 0
		for x in range(end, 0, -1):
			if directory[x] != '/':
				directory = directory[:-1]
			else:
				break
				
		directory = directory + folderAndFileName
		
		return directory
		
if __name__ == "__main__":
	rospy.init_node('htt_viz')
	app = QtWidgets.QApplication(sys.argv)
	mainWin = MainWindow()
	mainWin.show()
	sys.exit( app.exec_() )
	rospy.spin()
